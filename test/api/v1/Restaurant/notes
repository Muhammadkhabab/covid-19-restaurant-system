



    
    

    it('6. should return error message for invalid email', (done) => {
      const data0 = {
        first_name: 'Cecelia',
        last_name: 'Peterson',
        username: 'cpeterson3663',
        email: 'invalid@wisc',
        phone_number: '222-222-2222',
        password: 'apassword1',
        confirmed_password: 'apassword1',
        restaurant_name: "Cela's Restauranttt",
        avatar: 'avater.jpg',
        address: '1 University Avenue',
        restaurant_email: 'rest_email@gmail.com',
        restaurant_phone_number: '111-111-1111',
        cuisine: 'vegan',
        website_url: 'awebsite.com',
        dine_in: 0,
        dine_outside: 0,
        pickup: 0,
        curbside_pickup: 1,
        delivery: 0,
        policy_notes: 'keep your mask over your nose!',
        employee_capacity: 10,
        customer_capacity: 10,
        number_tables: 7,
        square_footage: 500,
        customer_per_table: 10,
        tables_distance: 10,
      };

      request(app)
        .post('/restaurants')
        .use(prefix)
        .send(data0)
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) return done(err);
          expect(res.statusCode).to.equal(400);
          expect(res.body).to.have.property('errors');
          expect(res.body.errors).to.have.lengthOf(1);
          expect(res.body.errors[0])
            .to.have.property('msg')
            .to.equal('Please enter a valid email!');
          done();
        });
    });

    it('7. should return error message for multiple invalid input', (done) => {
      const data0 = {
        first_name: 'Cecelia',
        last_name: 'Peterson',
        username: 'cpeterson3663',
        email: 'anemail@wisc.edu',
        phone_number: '222-222-2222',
        password: 'pass1',
        confirmed_password: 'pass1',
        restaurant_name: "Cela's Restauranttt",
        avatar: 'avater.jpg',
        address: '1 University Avenue',
        restaurant_email: 'rest_email@gmail',
        restaurant_phone_number: '111-111-1111',
        cuisine: 'vegan',
        website_url: 'awebsite.com',
        dine_in: 0,
        dine_outside: 0,
        pickup: 0,
        curbside_pickup: 1,
        delivery: 0,
        policy_notes: 'keep your mask over your nose!',
        employee_capacity: 10,
        customer_capacity: 10,
        number_tables: 7,
        square_footage: 500,
        customer_per_table: 10,
        tables_distance: 10,
      };

      request(app)
        .post('/restaurants')
        .use(prefix)
        .send(data0)
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) return done(err);
          expect(res.statusCode).to.equal(400);
          expect(res.body).to.have.property('errors');
          expect(res.body.errors).to.have.lengthOf(2);
          const msgs = [
            ['password', 'Password must be between 6 and 20 characters long!'],
            ['email', 'Please enter a valid email!'],
          ];
          console.log(res.body.errors);
          msgs.forEach((msg, i) => {
            expect(res.body.errors[i])
              .to.have.property('param')
              .to.equal(msg[0]);
            expect(res.body.errors[i]).to.have.property('msg').to.equal(msg[1]);
          });
          done();
        });
    });

    it('8. should return error message for an invalid password (wrong num chars)', (done) => {
      const data0 = {
        first_name: 'Cecelia',
        last_name: 'Peterson',
        username: 'cpeterson3663',
        email: 'anemail@wisc.esu',
        phone_number: '222-222-2222',
        password: 'pass1',
        confirmed_password: 'pass1',
        restaurant_name: "Cela's Restauranttt",
        avatar: 'avater.jpg',
        address: '1 University Avenue',
        restaurant_email: 'rest_email@gmail.com',
        restaurant_phone_number: '111-111-1111',
        cuisine: 'vegan',
        website_url: 'awebsite.com',
        dine_in: 0,
        dine_outside: 0,
        pickup: 0,
        curbside_pickup: 1,
        delivery: 0,
        policy_notes: 'keep your mask over your nose!',
        employee_capacity: 10,
        customer_capacity: 10,
        number_tables: 7,
        square_footage: 500,
        customer_per_table: 10,
        tables_distance: 10,
      };

      request(app)
        .post('/restaurants')
        .use(prefix)
        .send(data0)
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) return done(err);
          expect(res.statusCode).to.equal(400);
          expect(res.body).to.have.property('errors');
          expect(res.body.errors).to.have.lengthOf(1);
          expect(res.body.errors[0])
            .to.have.property('msg')
            .to.equal('Password must be between 6 and 20 characters long!');
          done();
        });
    });

    it('9. should return error message for an invalid password (no number)', (done) => {
      const data0 = {
        first_name: 'Cecelia',
        last_name: 'Peterson',
        username: 'cpeterson3663',
        email: 'anemail@wisc.edu',
        phone_number: '222-222-2222',
        password: 'apassword',
        confirmed_password: 'apassword',
        restaurant_name: "Cela's Restauranttt",
        avatar: 'avater.jpg',
        address: '1 University Avenue',
        restaurant_email: 'rest_email@gmail.com',
        restaurant_phone_number: '111-111-1111',
        cuisine: 'vegan',
        website_url: 'awebsite.com',
        dine_in: 0,
        dine_outside: 0,
        pickup: 0,
        curbside_pickup: 1,
        delivery: 0,
        policy_notes: 'keep your mask over your nose!',
        employee_capacity: 10,
        customer_capacity: 10,
        number_tables: 7,
        square_footage: 500,
        customer_per_table: 10,
        tables_distance: 10,
      };

      request(app)
        .post('/restaurants')
        .use(prefix)
        .send(data0)
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) return done(err);
          expect(res.statusCode).to.equal(400);
          expect(res.body).to.have.property('errors');
          expect(res.body.errors).to.have.lengthOf(1);
          expect(res.body.errors[0])
            .to.have.property('msg')
            .to.equal('Password must contain a number!');
          done();
        });
    });